mixin type(t)
  if !t
  else if t.type && t.type === 'FunctionType'
    | (
    each p, index in t.params
      +type(p)
      if index < t.params.length - 1
        |, 
    | ) => 
    if t.result === null
      | undefined
    else
      +type(t.result)
  else if t.type && t.type === 'TypeApplication'
    +type(t.expression)
    | &lt;
    each p, index in t.applications
      +type(p)
      if index < t.applications.length - 1
        |,
    | &gt;
  else if t.type && t.type === 'StringLiteralType'
    | "!{t.value}"
  else if t.type && t.type === 'OptionalType'
    | [
    +type(t.expression)
    | ]
  else if t.type && t.type === 'RecordType'
    |{
    for field, idxField in t.fields
      +type(field)
      if idxField < t.fields.length - 1
        |, 
    |}
  else if t.type && t.type === 'FieldType'
    | !{t.key}: 
    +type(t.value)
  else if t.type && t.type === 'UnionType'
    each p, index in t.elements
      +type(p)
      if index < t.elements.length - 1
        ||
  else if t.name
    if t.name !== 'Object' && t.name !== 'Array' && t.name[0] === t.name[0].toUpperCase()
      a.typed-link(href=`${navPath}#struct-${t.name}`)=t.name
    else
      | !{t.name}
